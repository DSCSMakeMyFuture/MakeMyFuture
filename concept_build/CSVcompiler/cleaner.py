# cleaner.py, by Pirjot Atwal
# Cleans JSON files generated by compiler.py to a usable format.
# @version 08/07/2021

try:
    import sys
    import re
    import json
    print("Compiler Running...")
except Exception as e:
    print("ERROR")

filename = 'data.json'
outfilename = 'cleaned_data.json'
if len(sys.argv) > 1:
    filename = sys.argv[1]
if len(sys.argv) > 2:
    outfilename = sys.argv[2]

# Load the file
raw_data = []
with open(filename) as jsonfile:
    raw_data = json.load(jsonfile)


# Set up the mapped_data
mapped_data = {
    "AREAS": [], # An array of Maps mapping Division Area Full names to Division Acronyms
    "DIVISIONS": [], # An array of Maps mapping Division Acronyms to Division Full names
    "CLASSES": [] # An array of Maps which map class information
}

# Iterate through the json file's classes
for i in range(len(raw_data)):
    next_class = raw_data[i]
    
    #Grab the id, the rest is the name
    class_pattern = re.compile(r'[A-Z]+\-\d+\w*')
    matches = class_pattern.finditer(next_class["CLASS"])
    class_id = list(matches)[0].group()
    class_division = class_id[:class_id.index('-')]
    class_number = class_id[class_id.index('-') + 1:]
    class_name = next_class["CLASS"][len(class_id) + 1:]

    number_pattern = re.compile(r'[0-9]+\.[0-9]*')
    #Grab the amount of hours (sum all matches of numbers together)
    matches = list(number_pattern.finditer(next_class["HOURS"]))
    total_hours = sum([float(x.group()) for x in matches])
    
    #Grab the amount of units
    matches = list(number_pattern.finditer(next_class["UNITS"]))
    total_units = sum([float(x.group()) for x in matches])
    
    #Determine Division Name
    division_acronyms = [list(division.keys())[0] for division in mapped_data["DIVISIONS"]]
    if class_division not in division_acronyms:
        new_division_name = input("New Division Found, Provide a name for " + class_division + ": ")
        mapped_data["DIVISIONS"].append({class_division: new_division_name})

    #Determine if the class' division already exists in an area
    found_area = False
    for area in mapped_data["AREAS"]:
        area_name = list(area.keys())[0]
        found_area = found_area or class_division in area[area_name]

    # Add the division to the corresponding area
    if not found_area:
        print("Please select an area for the division " + class_division + ":")
        for j in range(len(mapped_data["AREAS"])):
            print(str(j + 1) + ". " + list(mapped_data["AREAS"][j].keys())[0])
        print(str(len(mapped_data["AREAS"]) + 1) + ". New Division")
        new_input = input("Provide your selection: ")
        try: 
            index = int(new_input) - 1
        except Exception as e:
            index = len(mapped_data["AREAS"])
        if index < len(mapped_data["AREAS"]):
            mapped_data["AREAS"][index][list(mapped_data["AREAS"][index].keys())[0]].append(class_division)
        else:
            new_area = input("Provide the new area name: ")
            mapped_data["AREAS"].append({new_area: [class_division]})

    # Append the class to the classes array
    mapped_data["CLASSES"].append({
        "DIVISION": class_division,
        "NAME": class_name,
        "NUMBER": class_number,
        "UNITS": total_units,
        "HOURS": total_hours,
        "MISC": next_class["MISC"]
    })


# Save to file
print("Saving to file...")
with open(outfilename, "w") as outfile:
    json.dump(mapped_data, outfile)